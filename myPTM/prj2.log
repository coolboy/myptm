Build started 4/18/2010 1:36:41 AM.
     1>Project "D:\spring2010\cs2550\myPTM\prj2\prj2.vcxproj" on node 5 (build target(s)).
     1>_PrepareForBuild:
         Creating "Debug\myPTM.unsuccessfulbuild" because "AlwaysCreate" was specified.
       ClCompile:
         All outputs are up-to-date.
         D:\Program Files\Microsoft Visual Studio 10.0\VC\bin\CL.exe /c /nologo /W3 /WX- /Od /Oy- /D WIN32 /D _DEBUG /D _WINDOWS /D _UNICODE /D UNICODE /Gm- /EHsc /MTd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Yu"StdAfx.h" /Fp"Debug\myPTM.pch" /Fo"Debug\\" /Fd"Debug\vc100.pdb" /Gd /TP /analyze- /errorReport:prompt DataManager.cpp TranManager.cpp myPTM.cpp
         DataManager.cpp
         TranManager.cpp
         using native typeof
     1>..\..\..\..\setup\libraries\boost_1_41_0\boost/spirit/home/support/char_encoding/iso8859_1.hpp : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
     1>D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2779): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2765) : see declaration of 'std::_Fill_n'
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/utility/sequence_stack.hpp(201) : see reference to function template instantiation 'void std::fill_n<T*,size_t,U>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     T=boost::xpressive::detail::sub_match_impl<const char *>,
                     U=boost::xpressive::detail::sub_match_impl_default,
                     _OutIt=boost::xpressive::detail::sub_match_impl<const char *> *,
                     _Diff=size_t,
                     _Ty=boost::xpressive::detail::sub_match_impl_default
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/state.hpp(292) : see reference to function template instantiation 'T *boost::xpressive::detail::sequence_stack<T>::push_sequence<boost::xpressive::detail::sub_match_impl_default>(size_t,const U &)' being compiled
                 with
                 [
                     T=boost::xpressive::detail::sub_match_impl<const char *>,
                     U=boost::xpressive::detail::sub_match_impl_default
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/state.hpp(284) : while compiling class template member function 'void boost::xpressive::detail::match_state<BidiIter>::init_(const boost::xpressive::detail::regex_impl<BidiIter> &,boost::xpressive::match_results<BidiIter> &)'
                 with
                 [
                     BidiIter=const char *
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/regex_algorithms.hpp(498) : see reference to class template instantiation 'boost::xpressive::detail::match_state<BidiIter>' being compiled
                 with
                 [
                     BidiIter=const char *
                 ]
                 TranManager.cpp(79) : see reference to function template instantiation 'bool boost::xpressive::regex_search<const char>(const char *,boost::xpressive::match_results<BidiIter> &,const boost::xpressive::basic_regex<BidiIter> &,boost::xpressive::regex_constants::match_flag_type)' being compiled
                 with
                 [
                     BidiIter=const char *
                 ]
     1>D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2779): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2765) : see declaration of 'std::_Fill_n'
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/utility/sequence_stack.hpp(88) : see reference to function template instantiation 'void std::fill_n<T*,size_t,boost::xpressive::detail::sub_match_impl<BidiIter>>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     T=boost::xpressive::detail::sub_match_impl<const char *>,
                     BidiIter=const char *,
                     _OutIt=boost::xpressive::detail::sub_match_impl<const char *> *,
                     _Diff=size_t,
                     _Ty=boost::xpressive::detail::sub_match_impl<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/utility/sequence_stack.hpp(74) : while compiling class template member function 'boost::xpressive::detail::sub_match_impl<BidiIter> *boost::xpressive::detail::sequence_stack<T>::grow_(size_t)'
                 with
                 [
                     BidiIter=const char *,
                     T=boost::xpressive::detail::sub_match_impl<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/match_results.hpp(92) : see reference to class template instantiation 'boost::xpressive::detail::sequence_stack<T>' being compiled
                 with
                 [
                     T=boost::xpressive::detail::sub_match_impl<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/smart_ptr/intrusive_ptr.hpp(101) : see reference to class template instantiation 'boost::xpressive::detail::results_extras<BidiIter>' being compiled
                 with
                 [
                     BidiIter=const char *
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/smart_ptr/intrusive_ptr.hpp(100) : while compiling class template member function 'boost::intrusive_ptr<T>::~intrusive_ptr(void)'
                 with
                 [
                     T=boost::xpressive::detail::results_extras<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/match_results.hpp(1342) : see reference to class template instantiation 'boost::intrusive_ptr<T>' being compiled
                 with
                 [
                     T=boost::xpressive::detail::results_extras<const char *>
                 ]
                 TranManager.cpp(63) : see reference to class template instantiation 'boost::xpressive::match_results<BidiIter>' being compiled
                 with
                 [
                     BidiIter=const char *
                 ]
     1>D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2227): warning C4996: 'std::_Copy': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2212) : see declaration of 'std::_Copy'
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/sub_match_vector.hpp(162) : see reference to function template instantiation '_OutIt std::copy<boost::xpressive::detail::sub_match_impl<BidiIter>*,boost::xpressive::detail::sub_match_impl<BidiIter>*>(_InIt,_InIt,_OutIt)' being compiled
                 with
                 [
                     _OutIt=boost::xpressive::detail::sub_match_impl<const char *> *,
                     BidiIter=const char *,
                     _InIt=boost::xpressive::detail::sub_match_impl<const char *> *
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/sub_match_vector.hpp(158) : while compiling class template member function 'void boost::xpressive::detail::sub_match_vector<BidiIter>::init_(boost::xpressive::detail::sub_match_impl<BidiIter> *,boost::xpressive::detail::sub_match_vector<BidiIter>::size_type,const boost::xpressive::detail::sub_match_vector<BidiIter> &)'
                 with
                 [
                     BidiIter=const char *
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/match_results.hpp(365) : see reference to class template instantiation 'boost::xpressive::detail::sub_match_vector<BidiIter>' being compiled
                 with
                 [
                     BidiIter=const char *
                 ]
     1>D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2779): warning C4996: 'std::_Fill_n': Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ 'Checked Iterators'
                 D:\Program Files\Microsoft Visual Studio 10.0\VC\include\xutility(2765) : see declaration of 'std::_Fill_n'
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/utility/boyer_moore.hpp(61) : see reference to function template instantiation 'void std::fill_n<unsigned char*,int,unsigned char>(_OutIt,_Diff,const _Ty &)' being compiled
                 with
                 [
                     _OutIt=unsigned char *,
                     _Diff=int,
                     _Ty=unsigned char
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/utility/boyer_moore.hpp(48) : while compiling class template member function 'boost::xpressive::detail::boyer_moore<BidiIter,Traits>::boyer_moore(const char *,const char *,const Traits &,bool)'
                 with
                 [
                     BidiIter=const char *,
                     Traits=traits_type
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/finder.hpp(55) : see reference to class template instantiation 'boost::xpressive::detail::boyer_moore<BidiIter,Traits>' being compiled
                 with
                 [
                     BidiIter=const char *,
                     Traits=traits_type
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/optimize.hpp(80) : see reference to class template instantiation 'boost::xpressive::detail::boyer_moore_finder<BidiIter,Traits>' being compiled
                 with
                 [
                     BidiIter=const char *,
                     Traits=traits_type
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/core/optimize.hpp(110) : see reference to function template instantiation 'boost::intrusive_ptr<T> boost::xpressive::detail::optimize_regex<BidiIter,Traits>(const boost::xpressive::detail::xpression_peeker<Char> &,const Traits &,boost::mpl::true_)' being compiled
                 with
                 [
                     T=boost::xpressive::detail::finder<const char *>,
                     BidiIter=const char *,
                     Traits=traits_type,
                     Char=char
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/static/compile.hpp(53) : see reference to function template instantiation 'void boost::xpressive::detail::common_compile<BidiIter,Traits>(const boost::intrusive_ptr<T> &,boost::xpressive::detail::regex_impl<BidiIter> &,const Traits &)' being compiled
                 with
                 [
                     BidiIter=const char *,
                     Traits=traits_type,
                     T=const boost::xpressive::detail::matchable_ex<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/static/compile.hpp(79) : see reference to function template instantiation 'void boost::xpressive::detail::static_compile_impl2<Xpr,BidiIter,traits_type>(const Xpr &,const boost::shared_ptr<T> &,const Traits &)' being compiled
                 with
                 [
                     Xpr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>,
                     BidiIter=const char *,
                     T=boost::xpressive::detail::regex_impl<const char *>,
                     Traits=traits_type
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/detail/static/compile.hpp(99) : see reference to function template instantiation 'void boost::xpressive::detail::static_compile_impl1<Xpr,BidiIter>(const Xpr &,const boost::shared_ptr<T> &)' being compiled
                 with
                 [
                     Xpr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>,
                     BidiIter=const char *,
                     T=boost::xpressive::detail::regex_impl<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/basic_regex.hpp(250) : see reference to function template instantiation 'void boost::xpressive::detail::static_compile<Expr,BidiIter>(const Xpr &,const boost::shared_ptr<T> &)' being compiled
                 with
                 [
                     Expr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>,
                     BidiIter=const char *,
                     Xpr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>,
                     T=boost::xpressive::detail::regex_impl<const char *>
                 ]
                 ..\..\..\..\setup\libraries\boost_1_41_0\boost/xpressive/basic_regex.hpp(116) : see reference to function template instantiation 'void boost::xpressive::basic_regex<BidiIter>::compile_<Expr>(const Expr &,boost::mpl::true_)' being compiled
                 with
                 [
                     BidiIter=const char *,
                     Expr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>
                 ]
                 TranManager.cpp(34) : see reference to function template instantiation 'boost::xpressive::basic_regex<BidiIter>::basic_regex<boost::proto::exprns_::expr<Tag,Args,Arity>>(const Expr &)' being compiled
                 with
                 [
                     BidiIter=const char *,
                     Tag=boost::proto::tag::shift_right,
                     Args=boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,
                     Arity=2,
                     Expr=boost::proto::exprns_::expr<boost::proto::tag::shift_right,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<boost::xpressive::mark_tag &,const boost::proto::exprns_::expr<boost::proto::tag::comma,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::assign,boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<boost::xpressive::detail::set_initializer>,0> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &,boost::proto::exprns_::expr<boost::proto::tag::terminal,boost::proto::argsns_::term<const char &>,0>>,2> &>,2> &>,2>
                 ]
         myPTM.cpp
         using native typeof
     1>..\..\..\..\setup\libraries\boost_1_41_0\boost/spirit/home/support/char_encoding/iso8859_1.hpp : warning C4819: The file contains a character that cannot be represented in the current code page (936). Save the file in Unicode format to prevent data loss
         Generating Code...
     1>d:\spring2010\cs2550\myptm\prj2\myptm.cpp(37): warning C4700: uninitialized local variable 'line' used
       ManifestResourceCompile:
         All outputs are up-to-date.
       Link:
         D:\Program Files\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"D:\spring2010\cs2550\myPTM\Debug\myPTM.exe" /INCREMENTAL /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:"Debug\myPTM.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /PDB:"D:\spring2010\cs2550\myPTM\Debug\myPTM.pdb" /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"D:\spring2010\cs2550\myPTM\Debug\myPTM.lib" /MACHINE:X86 Debug\DataManager.obj
         Debug\myPTM.obj
         Debug\stdafx.obj
         Debug\TranManager.obj
         Debug\myPTM.exe.embed.manifest.res
       Manifest:
         C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\mt.exe /nologo /verbose /out:"Debug\myPTM.exe.embed.manifest" /manifest Debug\myPTM.exe.intermediate.manifest
         C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\rc.exe /nologo /fo"Debug\myPTM.exe.embed.manifest.res" Debug\myPTM_manifest.rc 
       LinkEmbedManifest:
         D:\Program Files\Microsoft Visual Studio 10.0\VC\bin\link.exe /ERRORREPORT:PROMPT /OUT:"D:\spring2010\cs2550\myPTM\Debug\myPTM.exe" /INCREMENTAL /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /ManifestFile:"Debug\myPTM.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /PDB:"D:\spring2010\cs2550\myPTM\Debug\myPTM.pdb" /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"D:\spring2010\cs2550\myPTM\Debug\myPTM.lib" /MACHINE:X86 Debug\DataManager.obj
         Debug\myPTM.obj
         Debug\stdafx.obj
         Debug\TranManager.obj
         Debug\myPTM.exe.embed.manifest.res
         prj2.vcxproj -> D:\spring2010\cs2550\myPTM\Debug\myPTM.exe
       _AfterBuild:
         Deleting file "Debug\myPTM.unsuccessfulbuild".
         Touching "Debug\myPTM.lastbuildstate".
     1>Done Building Project "D:\spring2010\cs2550\myPTM\prj2\prj2.vcxproj" (build target(s)).

Build succeeded.

Time Elapsed 00:02:45.46
